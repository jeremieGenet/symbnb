security:
    encoders:
        App\Entity\User:
            algorithm: bcrypt # On détermine pour notre entité User l'algorithmie en bcrypt qui est un type de criptage proposé par symfony
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers: # un provider est un fournisseur de données d'utilisateurs
        in_memory: { memory: ~ } # Paramètre par défaut
        in_database: # On crée un nouveau provider (que l'on nomme in_database (on pourrait l'appeller autrement, mais comme les utilisateurs proviennent de la bdd on le nomme ainsi))
            entity: # On défini que notre provider 'in_database' utilisera une entité
                class: App\Entity\User # Puis on défini l'entité qui sert à savoir ou se trouve les utilisateurs
                property: email # On doit alors définir une propriété (property) qui permettra son authentification (ici l'utilisateur s'authentifira avec son email)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        admin: # Création d'un autre firewall nommé "admin" (important qu'il soit au dessus de "main", puisqu'il possède un pattern, qu'il est plus spécifique que "main")
            pattern: ^/admin # Le paterne du firewall est un Regex qui permet de délimiter la partie à sécuriser (ici on sécurise toutes les url qui commencent par "/admin")
            anonymous: true # Est-ce qu'on peut y accéder de façon annonyme (utilisateur non-connecté) : ici oui, parce qu'on a une page pour le login administateur ("/admin/login")
            # Le provider sera celui configuré plus haut (celui dans la database à partir de l'entité User.php)
            provider: in_database # Si il y a des connection à l'url /admin (et ce sera forcément le cas), il faut dire qui est le pourvoyeur (provider)
            form_login: # Le formulaire de connexion administrateur est différent de la partie "main" (plus bas), donc il faut le configurer ici aussi
                login_path: admin_account_login # On configure le chemin pour aller au formulaire de login (le nom de la route défini dans le controller AdminAccountController.php)
                check_path: admin_account_login # On config le chemin de vérification des information données dans le formulaire de login sont vraie (ici c'est le même que login_path)
            logout:
                path: admin_account_logout # On config le chemin lorsqu'on se déconnecte (le nom de la route est défini dans la fonction logout() dans le controller AdminAccountController.php)
                target: homepage # Et le chemin lorsqu'on se déconnecte sera la page d'accueil
        main:
            anonymous: true

            provider: in_database # On crée dans le "main" (principal) firewalls un nouveau provider dans lequel on dit à symfony ou aller chercher les utilisateurs (soit ici dans in_database défini plus haut)
            form_login: # On fait appel à form_login (Symfony est livré avec un système form_login intégré qui gère automatiquement un formulaire de connexion POST)
                login_path: account_login # On lui notifie le chemin pour aller à la page de connexion ( Et dans le formulaire on nomme l'attribut action comme cela: <form action="{{ path('account_login') }}" method="post" >)
                check_path: account_login # on lui donne le chemin ou il doit verifier les informations d'authentification (qui est pour nous le même chemin)
            logout:
                path: account_logout # Nom de la route qui permet de se déconnecter
                target: account_login # Redirection vers le formulaire de connexion


            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    # Gestion des ACL (qui veut dire Acces Controlleur) (permet de faire une gestion plus générale des accès en fonction des rôles, sans passer par les controlleurs)
    access_control:
         - { path: ^/admin/login, roles: IS_AUTHENTICATED_ANONYMOUSLY } # ici on précise que ce chemin est accessible à "IS_AUTHENTICATED_ANONYMOUSLY", rôle qui represente un utilisateur non connecté (ATTENTION, l'ordre des autorisations est importante)
         - { path: ^/admin, roles: ROLE_ADMIN } # ici cela veut dire que les chemin de type /admin... nécessiterons obligatoirement le 'ROLE_ADMIN' et renvoie par défaut au formulaire de connexion
         
        # - { path: ^/profile, roles: ROLE_USER }
